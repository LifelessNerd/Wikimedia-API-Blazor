@page "/"
@inject HttpClient Http
@inject JObject JObj

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<br>
<label for="textbox1">Input:</label>
<input type="text" @bind="@input"/>
<br>
<label for="textbox2">Desired:</label>
<input type="text" @bind="@endpoint"/>

<button @onclick="StartProcess">Click me</button>

@code {


    public List<WikipediaPage> links = new List<WikipediaPage>();
    string input;
    string endpoint = "Fiji";

    void StartProcess()
    {
        // Main method that gets called when button is clicked
        Console.WriteLine(input);
        WikipediaPage sourcePage = new WikipediaPage(null, input);
        BFS(sourcePage, endpoint);

    }

    public async void BFS(WikipediaPage source, string desired)
    {
        HashSet<string> bekendePaginaLinks = new HashSet<string>();
        Queue<WikipediaPage> BFSqueue = new Queue<WikipediaPage>();
        BFSqueue.Enqueue(source);

        while (BFSqueue.Count > 0)
        {

            WikipediaPage current = BFSqueue.Dequeue();

            if (current.link == desired)
            {
                printParentsRoute(current);
                Console.WriteLine("WAHOOO YES");
                return;
            }

            current.pageLinks = await current.httpsRequest(current);
            List<WikipediaPage> allLinksFromSource = current.pageLinks;

            foreach (WikipediaPage linkedPage in allLinksFromSource)
            {
                if(!(bekendePaginaLinks.Contains(linkedPage.link))){ //needs testing
                    BFSqueue.Enqueue(linkedPage);
                    bekendePaginaLinks.Add(linkedPage.link);
                }
            }

        }
    }
    public void printParentsRoute(WikipediaPage page)
    {
        Console.WriteLine("Page found, this is the route:");
        while(page.parent != null)
        {
            Console.WriteLine(page);
            page = page.parent;
        }
    }

    public class WikipediaPage
    {
        public string? raw;
        public string link;
        public string displayName;
        public WikipediaPage? parent;
        public List<WikipediaPage>? pageLinks; //might need to become <string>
        public WikipediaPage(WikipediaPage? parent, string raw)
        {
            this.raw = raw;
            //Update link and displayname
            string trimmedTitle = raw.Substring(2, raw.Length - 4);
            string[] titleSplit = trimmedTitle.Split('|');
            this.link = titleSplit[0];
            this.displayName = titleSplit[titleSplit.Length - 1];

        }

        public async Task<List<WikipediaPage>> httpsRequest(WikipediaPage page)
        {
            // This function updates our links list for a certain page ('input')
            // Call asynchronous network methods in a try/catch block to handle exceptions.
            try
            {
                HttpClient myRequest = new HttpClient();

                string input = page.link;
                string url = "https://en.wikipedia.org/w/api.php?format=json&origin=*&action=query&prop=revisions&rvslots=*&rvprop=content&titles=" + input;
                using HttpResponseMessage response = await myRequest.GetAsync(url);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                // Above three lines can be replaced with new helper method below
                // string responseBody = await client.GetStringAsync(uri);

                JObject responseJSON = JObject.Parse(responseBody);
                //Console.WriteLine(responseJSON["query"]);

                JObject pagesJSON = (JObject)responseJSON["query"]["pages"];
                string pageId = pagesJSON.Properties().Select(p => p.Name).ToList()[0];
                //Any weird shit will get caught by try/catch
                string pageContent = responseJSON["query"]["pages"][pageId]["revisions"][0]["slots"]["main"]["*"].ToString();


                Regex pattern = new Regex(@"\[\[(.*?)\]\]"); //Regex generously donated by OpenAI's ChatGPT

                MatchCollection matchCollection = pattern.Matches(pageContent);
                List<WikipediaPage> links = new List<WikipediaPage>();
                foreach (Match deepMatch in matchCollection)
                {
                    string value = deepMatch.Value;
                    if (linkSelection(value))
                    {
                        WikipediaPage outputPage = new WikipediaPage(page, value);
                        links.Add(outputPage);
                    }
                }
                return links;
            }
            catch (Exception e)
            {
                Console.WriteLine("Weird thing happened with page " + page.raw + "\nPage was skipped just to be sure");
                return new List<WikipediaPage>();
            }
        }
        bool linkSelection(string match)
        {
            // Set of checks that determine if the match is valid or not

            if (match.Contains("File:"))
            {
                return false;
            }
            if (match.Contains("Category:"))
            {
                return false;
            }
            if (match.Contains("Image:"))
            {
                return false;
            }
            if (match.Contains("wikt:"))
            {
                return false;
            }
            Regex pattern = new Regex(@":(.*):");
            if (pattern.IsMatch(match))
            {

                return false;
            }

            return true;
        }
        public override string ToString()
        {
            return $"title: {raw}, link: {link}, displayName: {displayName}";
        }
        public void printPageLinks()
        {
            try{
                foreach (WikipediaPage page in pageLinks)
                {
                    Console.WriteLine(page.ToString());
                }
            } catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }
    



}
