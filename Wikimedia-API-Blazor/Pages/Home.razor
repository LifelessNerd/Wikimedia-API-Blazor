@page "/"
@inject HttpClient Http
@inject JObject JObj

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.
<br>
<label for="textbox1">Input:</label>
<input type="text" @bind="@input"/>
<br>
<label for="textbox2">Desired:</label>
<input type="text" @bind="@endpoint"/>

<button @onclick="StartProcess">Click me</button>

@code {

    HttpClient myRequest = new HttpClient();
    public List<WikipediaPage> links = new List<WikipediaPage>();
    string input;
    string endpoint;

    void StartProcess()
    {
        // Main method that gets called when button is clicked
        Console.WriteLine(input);
        WikipediaPage sourcePage = new WikipediaPage(null, input, this);
        Console.WriteLine(sourcePage.ToString());

    }

    public class WikipediaPage
    {
        public string? raw;
        public string? link;
        public string? displayName;
        public WikipediaPage? parent;
        public List<WikipediaPage>? pageLinks; //might need to become <string>
        public Home main;
        public WikipediaPage(WikipediaPage? parent, string raw, Home main)
        {
            this.raw = raw;
            this.main = main;
            updateDisplayAndLink(this.raw);

        }
        private void updateDisplayAndLink(string raw)
        {
            string trimmedTitle = raw.Substring(2, raw.Length - 4);
            string[] titleSplit = trimmedTitle.Split('|');
            this.link = titleSplit[0];
            this.displayName = titleSplit[titleSplit.Length - 1];
        }
        public void createLinkList()
        {
            main.httpsRequest(this);
            pageLinks = main.links;
        }

        public override string ToString()
        {
            return $"title: {raw}, link: {link}, displayName: {displayName}";
        }
        public void printPageLinks()
        {
            try{
                foreach (WikipediaPage page in pageLinks)
                {
                    Console.WriteLine(page.ToString());
                }
            } catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }
    public async void httpsRequest(WikipediaPage query)
    {
        // This function updates our links list for a certain page ('input')
        // Call asynchronous network methods in a try/catch block to handle exceptions.
        try
        {
            string input = query.link;
            string url = "https://en.wikipedia.org/w/api.php?format=json&action=query&prop=revisions&rvslots=*&rvprop=content&titles=" + input;
            using HttpResponseMessage response = await myRequest.GetAsync(url);
            response.EnsureSuccessStatusCode();
            string responseBody = await response.Content.ReadAsStringAsync();
            // Above three lines can be replaced with new helper method below
            // string responseBody = await client.GetStringAsync(uri);

            //Console.WriteLine(responseBody);
            JObject responseJSON = JObject.Parse(responseBody);
            //Console.WriteLine(responseJSON["query"]);

            JObject pagesJSON = (JObject)responseJSON["query"]["pages"];
            string pageId = pagesJSON.Properties().Select(p => p.Name).ToList()[0];
            //Any weird shit will get caught by try/catch
            string pageContent = responseJSON["query"]["pages"][pageId]["revisions"][0]["slots"]["main"]["*"].ToString();


            Regex pattern = new Regex(@"\[\[(.*?)\]\]"); //Regex generously donated by OpenAI's ChatGPT

            MatchCollection matchCollection = pattern.Matches(pageContent);
            links.Clear();
            foreach (Match deepMatch in matchCollection)
            {
                string value = deepMatch.Value;
                if (linkSelection(value))
                {
                    WikipediaPage page = new WikipediaPage(query, query.raw, this);
                    links.Add(page);
                    Console.WriteLine(value);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("\nException Caught!");
            Console.WriteLine("Message :{0} ", e.Message);
        }
    }
    bool linkSelection(string match)
    {
        // Set of checks that determine if the match is valid or not

        if (match.Contains("File:"))
        {
            return false;
        }
        if (match.Contains("Category:"))
        {
            return false;
        }
        if (match.Contains("wikt:"))
        {
            return false;
        }
        Regex pattern = new Regex(@":(.*):");
        if (pattern.IsMatch(match))
        {

            return false;
        }

        return true;
    }



}
